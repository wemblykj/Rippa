<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8"/>
  <script type="application/javascript">
    function onOpenFile(event) {
        event.stopPropagation();
        event.preventDefault();
        
        var fileList = event.target.files;
        
         // access files via fileList
        openFile(fileList[0]);
    }
    
    function drop(event) {
        event.stopPropagation();
        event.preventDefault();

        var fileList = event.dataTransfer.files;

        var file = fileList[0]
        
        // access files via fileList
        openFile(file);
        
        // update file select text
        //var fileSelect = document.getElementById("fileSelect");
        //fileSelect.files.clear();
        //fileSelect.files.append(file);
    }

    function openFile(file) {
        context.blob = file;
        render();
    }
   
    function dragOver(event) {
        event.stopPropagation();
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
    }
    
    function drawTile(ctx, cx, cy, offset) {
        blob = context.blob;
        tile = context.tileAttr;
        palette = context.palette;
        view = context.viewAttr;
        
        var plane = context.planeAttr;
        
        var rowIndex;
        for (rowIndex = 0; rowIndex < tile.size.h; ++rowIndex) {
            var y = cy + rowIndex;
        
            // interleaved
            start = offset + tile.stride * rowIndex;
            end = start + tile.size.w;
            
            tileData = blob.slice(start, end);
            
            ((y) => {    // capture y value
                tileData.arrayBuffer().then(buffer => {
                lineData = new Uint8Array(buffer)
                
                var buffer = new ArrayBuffer(tile.size.w);
                var pixelData = new Uint8Array(buffer);
            
                var columnIndex;
                for (columnIndex = 0; columnIndex < tile.size.w; ++columnIndex) {
                    var planeIndex;
                    for (planeIndex = 0; planeIndex < plane.planeCount; ++planeIndex) {
                        var mask = 1 << planeIndex;
                        
                        if ((mask & view.planeMask) != 0) {
                            var ofs = Math.floor(columnIndex / plane.planeCount);
                        
                            var tileByte = lineData[ofs];
                            var planeData = (tileByte &  mask);
                            pixelData[columnIndex] |= planeData;
                        }
                    }
                }
                
                for (columnIndex = 0; columnIndex < tile.size.w; ++columnIndex) {
                    ctx.fillStyle = palette.ToRGB(pixelData[columnIndex]);
                                        
                    var x = cx + columnIndex;
                    ctx.fillRect(x, y, 1, 1);
                }
              });
            })(y);
        }
    }
    
    function render() {
      
      var canvas = document.getElementById('canvas');
      if (canvas.getContext) {
        var ctx = canvas.getContext('2d');

        ctx.clearRect(0, 0, canvas.width, canvas.height);

        if (context.blob !== null) {
            renderTileView(ctx);
        }
     }
   }
        
   function renderTileView(ctx) {
        var blob = context.blob;
        var nav = context.navigation;
        var tile = context.tileAttr;
        var plane = context.planeAttr;
        var view = context.viewAttr;
        
        var offset = nav.offset;
        
        ctx.fillStyle = 'rgb(200, 0, 0)';
        
        var cy = view.margin.h;
        eos = false;
        while (!eos && (cy + tile.size.h) < canvas.height) {
            var cx = view.margin.w;
            while (!eos && (cx + tile.size.w) < canvas.width) {
                if (offset < blob.size) {
                    drawTile(ctx, cx, cy, offset);
                
                    cx += tile.size.w + view.spacing.h;
                    offset += tile.stride * tile.size.h;
                } else {
                    eos = true;
                }
            }
            
            cy += tile.size.h + view.spacing.h;
        }
    }
    
    function Size(w, h) {
      this.w = w;
      this.h = h;
    }
    
    function Rect(t, l, w, h) {
      this.t = t;
      this.l = l;
      this.w = w;
      this.h = h;
    }
    
    function Point(x, y) {
      this.x = x;
      this.y = y;
    }
    
    function Navigation(offset = 0) {
      this.offset = offset;
    }
    
    function TileAttributes(w, h) {
      this.size = new Size(w, h);
      this.stride = w;
    }
    
    function PlaneAttributes(planeCount) {
      this.planeCount = planeCount;
      this.interleaved = true;
      //this.planeAttr.stride = 0;
    }
    
    function ViewAttributes(planeMask = 0xff) {
      this.margin = new Size(2, 2);
      this.spacing = new Size(2, 2);
      this.planeMask = planeMask;
    }
    
    function Palette(bpp, rgbArray) {
      this.bitsPerPixel = bpp;
      this.rgbArray = rgbArray;
      this.ToRGB = function(index) {
        var i = (index % this.bpp) << (8-this.bpp);
        return this.rgbArray[i];
      };
    }
    
    function Context() {
        this.blob = null;
        
        this.navigation = new Navigation();
        
        this.tileAttr = new TileAttributes(8, 8);
        
        this.viewAttr = new ViewAttributes();
        
        
        this.planeAttr = new PlaneAttributes(8);
    }
    
    function updateTileUI(tileAttr) {
        var tileWidth = document.getElementById("tileWidth");
        tileWidth.value = tileAttr.size.w;
        
        var tileHeight = document.getElementById("tileHeight");
        tileHeight.value = tileAttr.size.h;
    }
    
    function updatePlaneUI(planeAttr) {
        var planeCount = document.getElementById("planeCount");
        planeCount.value = planeAttr.planeCount;
    }
    
    function updateUI() {
        updateTileUI(context.tileAttr);
        updatePlaneUI(context.planeAttr);
    }
    
    function onTileAttrChanged(event) {
        if (event.target.id == "tileWidth") {
            context.tileAttr.size.w = parseInt(event.target.value);
        } else if (event.target.id == "tileHeight") {
            context.tileAttr.size.h = parseInt(event.target.value);
        }
        
        render();
    }
    
    function onPlaneAttrChanged(event) {
        if (event.target.id == "planeCount") {
            context.planeAttr.planeCount = parseInt(event.target.value);
        }
        
        render();
    }
    
    function onLoad() {
        var dropZone = document.getElementById("canvas");
        dropZone.addEventListener("dragover", dragOver, false);
        dropZone.addEventListener("drop"    , drop    , false);
        
        testData = new Uint8Array(
        [
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00]);
        context.blob = new Blob([testData.buffer]);
        
        var rgbArray = [];//['rgb(255, 255, 255)'];
        var paletteIndex;
        for (paletteIndex = 0; paletteIndex < 256; ++paletteIndex) {
            var intensity = (((paletteIndex >> 3)+1)*8)-1;
            var r = intensity * ((paletteIndex & 0x02) >> 1);
            var g = intensity * ((paletteIndex & 0x04) >> 2);
            var b = intensity * (paletteIndex & 0x01);
            
            rgb = `rgb(${r}, ${g}, ${b})`;
            
            rgbArray[paletteIndex] = rgb;
        }
        
        context.palette = new Palette(8, rgbArray);
        
        updateUI();        
        render();
    }
    
    var context = new Context();
    
  </script>
 </head>
 <body onload="onLoad();">
  <input id="fileSelect" type="file" onchange="onOpenFile(event)"/>
  <div>
    <canvas id="canvas" width="256" height="192"></canvas>
  </div>
  <div>
    <span>
        <input id="tileWidth" type="number" onchange="onTileAttrChanged(event)"/>
        <input id="tileHeight" type="number" onchange="onTileAttrChanged(event)"/>
    </span>
  </div>
  <div>
    <span>
        <input id="planeCount" type="number" onchange="onPlaneAttrChanged(event)"/>
    </span>
  </div>
 </body>
</html>