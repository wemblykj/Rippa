<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" type="text/css" href="Rippa.css">
  <!--script type="module" src="Rippa.js"></script-->
  <script type="module">
    import {Rippa} from './Rippa/Rippa.js'
    import * as Model from './Rippa/Model.js'
	
    var paletteViewType = 1;

	window.onOpenFile = function(event) {
        event.stopPropagation();
        event.preventDefault();
        
        var fileList = event.target.files;
        
         // access files via fileList
        openFile(fileList[0]);
    }
    
    window.drop = function(event) {
        event.stopPropagation();
        event.preventDefault();

        var fileList = event.dataTransfer.files;

        var file = fileList[0]
        
        // access files via fileList
        openFile(file);
        
        // update file select text
        //var fileSelect = document.getElementById("fileSelect");
        //fileSelect.files.clear();
        //fileSelect.files.append(file);
    }

    function openFile(file) {
        window.tileSearchContext.bindBinary(file);
        window.paletteSearchContext.bindBinary(file);
	
        render();
    }
   
    window.dragOver = function(event) {
        event.stopPropagation();
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
    }

    function bindPalette() {
        window.tileSearchContext.bindPalette(window.tilePalette);
        window.paletteSearchContext.bindPalette(window.systemPalette);

        switch(paletteViewType) {
            case 0:
                window.paletteContext.bindPalette(window.systemPalette);
                break;
            case 1:
                window.paletteContext.bindPalette(window.tilePalette);
        }
    }

    function render() { 
        /*var paletteCanvas = document.getElementById('paletteCanvas');
		var paletteContext = window.paletteContext;
        if (paletteContext.blob !== null) {
            window.rippa.render(paletteContext, paletteCanvas);
        } */
        var tileCanvas = document.getElementById('tileCanvas');
		if (window.tileSearchContext.blob !== null) {
            window.tileSearchView.render(window.tileSearchContext, tileCanvas);
        }

        var paletteCanvas = document.getElementById('paletteCanvas');
        switch(paletteViewType) {
            case 0:
            case 1:
                window.paletteView.render(window.paletteContext, paletteCanvas);
                break;
            case 2:
                window.paletteSearchView.render(window.paletteSearchContext, paletteCanvas);
                break;
        }
   }
    
   function updateTileSearchViewSettingsUI(view) {
        var zoomCtl = document.getElementById("zoom");
        zoomCtl.value = Math.floor(view.zoom.h * 100);
   }
   
   function updateTileNavigationUI(nav) {
        var offset = document.getElementById("offset");
        offset.value = nav.offset;
   }

    function updateTileUI(tile) {
        var tileWidth = document.getElementById("tileWidth");
        tileWidth.value = tile.width;
        
        var tileHeight = document.getElementById("tileHeight");
        tileHeight.value = tile.height;
		
        window.tileSearchContext.invalidate();
    }
    
    function updatePackingUI(planeAttr) {
        var planeCount = document.getElementById("planeCount");
        planeCount.value = planeAttr.planeCount;
        var planePacking = document.getElementById("planePacking");
        planePacking.value = planeAttr.packing;
        var planeEndian = document.getElementById("planeEndian");
        planeEndian.value = planeAttr.endian;
    }
    
    function updateTileSearchViewUI() {
        var context = window.tileSearchContext;

        updateTileSearchViewSettingsUI(context.view);
        updateTileNavigationUI(context.nav);
        updateTileUI(context.model.tile);
        updatePackingUI(context.model.packing);
    }

    function updatePaletteViewUI() {
        var paletteViewTypeCtrl = document.getElementById("paletteViewType");
        paletteViewTypeCtrl.value = paletteViewType
    }

    function updateUI() {
        updateTileSearchViewUI();
        updatePaletteViewUI();
    }
    
    window.onViewChanged = function(event) {
        var context = window.tileSearchContext;

        if (event.target.id == "zoom") {
            var z = parseInt(event.target.value);
            z = Math.max(50, z) / 100;
            context.view.zoom.h = z;
            context.view.zoom.v = z;
        }
        
        context.invalidate();
        render();
    }
    
    window.onNavigationChanged = function(event) {
        if (event.target.id == "offset") {
            var offset = parseInt(event.target.value);
            offset = Math.max(0, offset);
            window.tileSearchContext.nav.offset = offset;
        }
        
        //tileContext.invalidate();
        render();
    }

    window.onTileAttrChanged = function(event) {
        var context = window.tileSearchContext;
        
        if (event.target.id == "tileWidth") {
            context.model.tile.width = parseInt(event.target.value);
        } else if (event.target.id == "tileHeight") {
            context.model.tile.height = parseInt(event.target.value);
        }

        context.invalidate();
        render();
    }
    
    window.onPlaneAttrChanged = function(event) {
        var context = window.tileSearchContext;

        if (event.target.id == "planeCount") {
            context.model.packing.setPlaneCount(parseInt(event.target.value));
        } else if (event.target.id == "planePacking") {
            context.model.packing.packing = parseInt(event.target.value);
        } else if (event.target.id == "planeEndian") {
            context.model.packing.littleEndian = parseInt(event.target.value) == 0;
        }
        
        context.invalidate();
        render();
    }
    
    window.onPaletteViewChanged = function(event) {
        if (event.target.id == "paletteViewType") {
            paletteViewType = parseInt(event.target.value);
            bindPalette();

            switch(paletteViewType) {
                case 0:
                case 1:
                    window.paletteContext.invalidate();
                    break;
            }
        }
        
        render();
    }

    function _resize() {
        var tileCanvas = document.getElementById('tileCanvas');
		
		var clientRect = tileCanvas.getBoundingClientRect();
		tileCanvas.width = clientRect.width;
		tileCanvas.height = clientRect.height;

        var paletteCanvas = document.getElementById('paletteCanvas');
		
		var paletteCanvasRect = paletteCanvas.getBoundingClientRect();
		paletteCanvas.width = paletteCanvasRect.width;
		paletteCanvas.height = paletteCanvasRect.height;
    }

	window.onResize = function() {
        
        _resize();

        if (window.tileSearchContext)
            window.tileSearchContext.invalidate();
            
		render();
	}
	
    window.onLoad = function() {
        var dropZone = document.getElementById("tileCanvas");
        dropZone.addEventListener("dragover", dragOver, false);
        dropZone.addEventListener("drop"    , drop    , false);
        
        var rippa = new Rippa();
        var preset = rippa.getPresetByName("MSX2Screen");
        var attributes = preset.attributes;
        window.systemPalette = preset.systemPalette;
        window.tilePalette = preset.tilePalette;

        window.rippa = rippa;
        
        window.paletteView = rippa.createPaletteView();
        window.paletteContext = window.paletteView.createContext();


        window.paletteSearchView = rippa.createPaletteSearchView();
        window.paletteSearchAttributes = preset.paletteSearchAttributes;

        //var palettePacking = new Model.PalettePackingRGBA("rrrrrrrrggggggggbbbbbbbbxxxxxxxx");
        var palettePacking = new Model.PalettePackingIndex(2, window.systemPalette);
        window.paletteSearchAttributes.packing = palettePacking;

        window.paletteSearchContext = window.paletteSearchView.createContext(window.paletteSearchAttributes);

        window.tileSearchView = rippa.createTileSearchView();
        window.tileSearchAttributes = preset.tileSearchAttributes;
        window.tileSearchContext = window.tileSearchView.createContext(window.tileSearchAttributes);
        
        // produce a default intensity/RGB based palette
/*
        var system_bpp = 9;
        var tile_bpp = 4;
        
        var systemPaletteCount = 2**system_bpp;
        var systemPalette = [];
		var step = (255 / (systemPaletteCount >> 3));
		var intensityBits = (8 - (system_bpp-3));
		var intensityStep = 2**intensityBits;
		for (paletteIndex = 0; paletteIndex < systemPaletteCount; ++paletteIndex) {
			var i = (paletteIndex >> 3) * intensityStep;

			if (paletteIndex & 7) {
				i = (i + intensityStep) - 1;
				var r = Math.floor(i * ((paletteIndex & 0x02) >> 1));
				var g = Math.floor(i * ((paletteIndex & 0x04) >> 2));
				var b = Math.floor(i * (paletteIndex & 0x01));

				var rgb = `rgb(${r}, ${g}, ${b})`;
			}
			else {
				// greyscale
				i = i
				var rgb = `rgb(${i}, ${i}, ${i})`;
			}
			
			systemPalette[paletteIndex] = rgb;
		}
        
	    window.systemPalette = new Graphics.RGBPalette(system_bpp, systemPalette);

        var tilePalette = [];
        var paletteIndex;
		var systemPaletteCount = (2**system_bpp);
		var tilePaletteCount = (2**tile_bpp);
		var step = (systemPaletteCount-1) / (tilePaletteCount-1);
		for (paletteIndex = 0; paletteIndex < tilePaletteCount; ++paletteIndex) {
			var systemIndex = Math.floor(paletteIndex * step);
			tilePalette[paletteIndex] = systemIndex;
		}

	    window.tilePalette = new Graphics.IndexedPalette(tile_bpp, window.systemPalette, tilePalette);
*/	
        var testData = new Uint8Array(
        [
        // 8x8 8-bit
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        // 8x8 8-bit
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        // 8x8 4-bit
        0xf0, 0xff, 0xff, 0x0f,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f, 
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f,
        // 8x8 4-bit
         0xf0, 0xff, 0xff, 0x0f,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f, 
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f,
        // 8x8 2-bit
        0x3f, 0xfc,
        0xc0, 0x03,
        0xc0, 0x03,
        0x0f, 0xfc, 
        0xc0, 0x03,
        0xc0, 0x03,
        0xc0, 0x03,
        0x3f, 0xfc,
        // 8x8 2-bit
        0x0f, 0xfc,
        0xc0, 0x03,
        0xc0, 0x03,
        0x0f, 0xfc, 
        0xc0, 0x03,
        0xc0, 0x03,
        0xc0, 0x03,
        0x3f, 0xfc,
        // 8x8 1-bit
        0x7e,
        0x81,
        0x81,
        0x7e, 
        0x81,
        0x81,
        0x81,
        0x7e,
        // 8x8 1-bit
        0x7e,
        0x81,
        0x81,
        0x7e, 
        0x81,
        0x81,
        0x81,
        0x7e]);

        var blob = new Blob([testData.buffer]);
        
        window.tileSearchContext.bindBinary(blob);
        window.paletteSearchContext.bindBinary(blob);
        /*var rgbArray = [];//['rgb(255, 255, 255)'];
        var paletteIndex;
        var bpp = 4;
        for (paletteIndex = 0; paletteIndex < (2**bpp); ++paletteIndex) {
            var intensity = (((paletteIndex >> 3)+1)<<(11-bpp))-1;
            var r = intensity * ((paletteIndex & 0x02) >> 1);
            var g = intensity * ((paletteIndex & 0x04) >> 2);
            var b = intensity * (paletteIndex & 0x01);
            
            var rgb = `rgb(${r}, ${g}, ${b})`;
            
            rgbArray[paletteIndex] = rgb;
        }
        
        context.palette = new Palette(bpp, rgbArray);
        */
        
        updateUI();
        
        _resize();

        bindPalette();
        render();
    }
    
  </script>
 </head>
 <body onload="onLoad()" onresize="onResize()">
    <div class="container" id="UIContainer">
        <div class="header pane" id="HeaderPane">
            <input id="fileSelect" type="file" onchange="onOpenFile(event)"/>
        </div>
        <div class="content pane" id="ContentPane">
            <div class="container" id="ContentContainer">
                <div class="left pane" id="TileUI">
                    <div class="container2" id="">
                        <div class="view" id="TileSearchView">
                            <canvas class="greedy" id="tileCanvas"></canvas>
                        </div>
                        <div class="controls" id="TileControls">
                            <div>
                                <label for="zoom">Zoom</label>
                                <input id="zoom" type="number" min="50" max="800" value="100" onchange="onViewChanged(event); return false;"/>
                            </div>
                            <div>
                                <label for="offset">Offset</label>
                                <input id="offset" type="number" min="0" value="0" onchange="onNavigationChanged(event); return false;"/>
                            </div>
                            <div>
                                <label for="tileWidth">Tile width</label>
                                <input id="tileWidth" type="number" min="1" max="1024" onchange="onTileAttrChanged(event); return false;"/>
                                <label for="tileHeight">Tile height</label>
                                <input id="tileHeight" type="number" min="1" max="1024" onchange="onTileAttrChanged(event); return false;"/>
                            </div>
                            <div>
                                <label for="planeCount">Plane count</label>
                                <select id="planeCount" type="number" onchange="onPlaneAttrChanged(event); return false;">
                                    <option value="1">1-bit</option>
                                    <option value="2">2-bit</option>
                                    <option value="4">4-bit</option>
                                    <option value="8">8-bit</option>
                                </select>
                                <label for="planePacking">Plane packing</label>
                                <select id="planePacking" type="number" onchange="onPlaneAttrChanged(event); return false;">
                                    <option value="0">Interleaved</option>
                                    <option value="1">Byte</option>
                                    <option value="2">Line</option>
                                    <option value="3">Tile</option>
                                </select>
                                <label for="planeEndian">Plane endianess</label>
                                <select id="planeEndian" type="number" onchange="onPlaneAttrChanged(event); return false;">
                                    <option value="0">Little</option>
                                    <option value="1">Big</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="left pane" id="PaletteUI">
                    <div class="container2">
                        <div class="view" id="PaletteView">
                            <canvas id="paletteCanvas" ></canvas>
                        </div>
                        <div class="controls" id="PaletteControls">
                            <div>
                                <label for="paletteViewType">View</label>
                                <select id="paletteViewType" type="number" onchange="onPaletteViewChanged(event); return false;">
                                    <option value="0">System</option>
                                    <option value="1">Tile</option>
                                    <option value="2">Search</option>
                                </select>
                            </div>
                            <div>
                                <label for="zoom">Zoom</label>
                                <input id="zoom" type="number" min="50" max="800" value="100" onchange="onPaletteViewChanged(event); return false;"/>
                            </div>
                            <div>
                                <label for="offset">Offset</label>
                                <input id="offset" type="number" min="0" value="0" onchange="onPaletteViewChanged(event); return false;"/>
                            </div>
                        </div>
                    </div>
                </div>   
            </div>
        </div>
        <div class="footer pane" id="HeaderPane">
            <input id="fileSelect" type="file" onchange="onOpenFile(event)"/>
        </div>
    </div>   
 </body>
</html>