<!DOCTYPE html>
<html>
 <head>
 <style>
    #canvas {
      border-width: 1px;
      border-style: solid;
      border-color: Black;
	  width: 100%;
	  height: 100%;
    }
  </style>
  <meta charset="utf-8"/>
  <script type="application/javascript" src="Rippa.js"></script>
  <script type="application/javascript">
    function onOpenFile(event) {
        event.stopPropagation();
        event.preventDefault();
        
        var fileList = event.target.files;
        
         // access files via fileList
        openFile(fileList[0]);
    }
    
    function drop(event) {
        event.stopPropagation();
        event.preventDefault();

        var fileList = event.dataTransfer.files;

        var file = fileList[0]
        
        // access files via fileList
        openFile(file);
        
        // update file select text
        //var fileSelect = document.getElementById("fileSelect");
        //fileSelect.files.clear();
        //fileSelect.files.append(file);
    }

    function openFile(file) {
        context.blob = file;
		context.viewAttr.clear = true;
		
        render();
    }
   
    function dragOver(event) {
        event.stopPropagation();
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
    }
    
    async function render() {  
        var canvas = document.getElementById('canvas');
		
		parentSize = canvas.parentNode.getBoundingClientRect();
		canvas.width = parentSize.width;
		canvas.height =parentSize.height;
		
        var ctx = canvas.getContext('2d');
        
        if (ctx) {
            //ctx.setTransform(zoom, 0, 0, zoom, 0, 0);
            
            if (context.blob !== null) {
                let promise = rippa.render(canvas);
            }
        }
   }
    
   function updateViewUI(view) {
        var zoomCtl = document.getElementById("zoom");
        zoomCtl.value = Math.floor(view.zoom.h * 100);
   }
   
   function updateNavigationUI(nav) {
        var offset = document.getElementById("offset");
        offset.value = nav.offset;
   }

    function updateTileUI(tileAttr) {
        var tileWidth = document.getElementById("tileWidth");
        tileWidth.value = tileAttr.size.w;
        
        var tileHeight = document.getElementById("tileHeight");
        tileHeight.value = tileAttr.size.h;
		
		context.viewAttr.clear = true;
    }
    
    function updatePlaneUI(planeAttr) {
        var planeCount = document.getElementById("planeCount");
        planeCount.value = planeAttr.planeCount;
        var planePacking = document.getElementById("planePacking");
        planePacking.value = planeAttr.packing;
    }
    
    function updateUI() {
        updateViewUI(context.viewAttr);
        updateNavigationUI(context.navigation);
        updateTileUI(context.tileAttr);
        updatePlaneUI(context.planeAttr);
    }
    
    function onViewChanged(event) {
        if (event.target.id == "zoom") {
            context.viewAttr.zoom.h = parseInt(event.target.value) / 100;
            context.viewAttr.zoom.v = context.viewAttr.zoom.h;
			
			context.viewAttr.clear = true;
        }
        
        render();
    }
    
    function onNavigationChanged(event) {
        if (event.target.id == "offset") {
            context.navigation.offset = parseInt(event.target.value);
        }
        
        render();
    }

    function onTileAttrChanged(event) {
        if (event.target.id == "tileWidth") {
            context.tileAttr.size.w = parseInt(event.target.value);
        } else if (event.target.id == "tileHeight") {
            context.tileAttr.size.h = parseInt(event.target.value);
        }
        
        render();
    }
    
    function onPlaneAttrChanged(event) {
        if (event.target.id == "planeCount") {
            context.planeAttr.setPlaneCount(parseInt(event.target.value));
        } else if (event.target.id == "planePacking") {
            context.planeAttr.packing = parseInt(event.target.value);
        }
        
        render();
    }
    
	function onResize() {
		render();
	}
	
    function onLoad() {
        var dropZone = document.getElementById("canvas");
        dropZone.addEventListener("dragover", dragOver, false);
        dropZone.addEventListener("drop"    , drop    , false);
        
        testData = new Uint8Array(
        [
        // 8x8 8-bit
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        // 8x8 8-bit
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        // 8x8 4-bit
        0xf0, 0xff, 0xff, 0x0f,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f, 
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f,
        // 8x8 4-bit
         0xf0, 0xff, 0xff, 0x0f,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f, 
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f,
        // 8x8 2-bit
        0x3f, 0xfc,
        0xc0, 0x03,
        0xc0, 0x03,
        0x0f, 0xfc, 
        0xc0, 0x03,
        0xc0, 0x03,
        0xc0, 0x03,
        0x3f, 0xfc,
        // 8x8 2-bit
        0x0f, 0xfc,
        0xc0, 0x03,
        0xc0, 0x03,
        0x0f, 0xfc, 
        0xc0, 0x03,
        0xc0, 0x03,
        0xc0, 0x03,
        0x3f, 0xfc,
        // 8x8 1-bit
        0x7e,
        0x81,
        0x81,
        0x7e, 
        0x81,
        0x81,
        0x81,
        0x7e,
        // 8x8 1-bit
        0x7e,
        0x81,
        0x81,
        0x7e, 
        0x81,
        0x81,
        0x81,
        0x7e]);

        context.blob = new Blob([testData.buffer]);
        
        var rgbArray = [];//['rgb(255, 255, 255)'];
        var paletteIndex;
        var bpp = 4;
        for (paletteIndex = 0; paletteIndex < (2**bpp); ++paletteIndex) {
            var intensity = (((paletteIndex >> 3)+1)<<(11-bpp))-1;
            var r = intensity * ((paletteIndex & 0x02) >> 1);
            var g = intensity * ((paletteIndex & 0x04) >> 2);
            var b = intensity * (paletteIndex & 0x01);
            
            rgb = `rgb(${r}, ${g}, ${b})`;
            
            rgbArray[paletteIndex] = rgb;
        }
        
        context.palette = new Palette(bpp, rgbArray);
        
        rippa.setContext(context);
        
        updateUI();        
        render();
    }
    
    var rippa = new Rippa();
    var context = rippa.createContext();
    
  </script>
 </head>
 <body onload="onLoad()" onresize="onResize()">
  <input id="fileSelect" type="file" onchange="onOpenFile(event)"/>
  <div>
    <canvas id="canvas"></canvas>
  </div>
  <div>
    <span>
        <label for="zoom">Zoom</label>
        <input id="zoom" type="number" onchange="onViewChanged(event)"/>
    </span>
  </div>
  <div>
    <span>
        <label for="offset">Offset</label>
        <input id="offset" type="number" onchange="onNavigationChanged(event)"/>
    </span>
  </div>
  <div>
    <span>
        <label for="tileWidth">Tile width</label>
        <input id="tileWidth" type="number" onchange="onTileAttrChanged(event)"/>
        <label for="tileHeight">Tile height</label>
        <input id="tileHeight" type="number" onchange="onTileAttrChanged(event)"/>
    </span>
  </div>
  <div>
    <span>
        <label for="planeCount">Plane count</label>
        <select id="planeCount" type="number" onchange="onPlaneAttrChanged(event)">
            <option value="1">1-bit</option>
            <option value="2">2-bit</option>
            <option value="4">4-bit</option>
            <option value="8">8-bit</option>
        </select>
        <label for="planePacking">Plane packing</label>
        <select id="planePacking" type="number" onchange="onPlaneAttrChanged(event)"/>
            <option value="0">Interleaved</option>
            <option value="1">Byte</option>
            <option value="2">Line</option>
            <option value="3">Tile</option>
        </select>
    </span>
  </div>
 </body>
</html>