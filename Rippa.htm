<!DOCTYPE html>
<html>
 <head>
 <style>
    #canvas {
      border-width: 1px;
      border-style: solid;
      border-color: Black;
	  width: 100%;
	  height: 100%;
    }
  </style>
  <meta charset="utf-8"/>
  <!--script type="module" src="Rippa.js"></script-->
  <script type="module">
    import {Rippa} from './Rippa.js'
	
	window.onOpenFile = function(event) {
        event.stopPropagation();
        event.preventDefault();
        
        var fileList = event.target.files;
        
         // access files via fileList
        openFile(fileList[0]);
    }
    
    window.drop = function(event) {
        event.stopPropagation();
        event.preventDefault();

        var fileList = event.dataTransfer.files;

        var file = fileList[0]
        
        // access files via fileList
        openFile(file);
        
        // update file select text
        //var fileSelect = document.getElementById("fileSelect");
        //fileSelect.files.clear();
        //fileSelect.files.append(file);
    }

    function openFile(file) {
        var renderContext = window.renderContext;
        renderContext.blob = file;

		renderContext.invalidate();
		
        render();
    }
   
    window.dragOver = function(event) {
        event.stopPropagation();
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
    }
    
    function render() {  
        
		
        var ctx = canvas.getContext('2d');
        
        if (ctx) {
            //ctx.setTransform(zoom, 0, 0, zoom, 0, 0);
            
            var renderContext = window.renderContext;

            if (renderContext.blob !== null) {
                window.rippa.render(renderContext, canvas);
            }
        }
   }
    
   function updateViewUI(view) {
        var zoomCtl = document.getElementById("zoom");
        zoomCtl.value = Math.floor(view.zoom.h * 100);
   }
   
   function updateTileNavigationUI(nav) {
        var offset = document.getElementById("offset");
        offset.value = nav.offset;
   }

    function updateTileUI(tileAttr) {
        var tileWidth = document.getElementById("tileWidth");
        tileWidth.value = tileAttr.size.w;
        
        var tileHeight = document.getElementById("tileHeight");
        tileHeight.value = tileAttr.size.h;
		
		window.renderContext.invalidate();
    }
    
    function updatePackingUI(planeAttr) {
        var planeCount = document.getElementById("planeCount");
        planeCount.value = planeAttr.planeCount;
        var planePacking = document.getElementById("planePacking");
        planePacking.value = planeAttr.packing;
        var planeEndian = document.getElementById("planeEndian");
        planeEndian.value = planeAttr.endian;
    }
    
    function updateUI() {
        var renderContext = window.renderContext;

        updateViewUI(renderContext.attributes.view);
        updateTileNavigationUI(renderContext.attributes.tileNav);
        updateTileUI(renderContext.attributes.tile);
        updatePackingUI(renderContext.attributes.packing);
    }
    
    window.onViewChanged = function(event) {
        var renderContext = window.renderContext;

        if (event.target.id == "zoom") {
            var z = parseInt(event.target.value);
            z = Math.max(50, z) / 100;
            renderContext.attributes.view.zoom.h = z;
            renderContext.attributes.view.zoom.v = z;
        }
        
        renderContext.invalidate();
        render();
    }
    
    window.onNavigationChanged = function(event) {
        if (event.target.id == "offset") {
            var offset = parseInt(event.target.value);
            offset = Math.max(0, offset);
            renderContext.attributes.tileNav.offset = offset;
        }
        
        //renderContext.invalidate();
        render();
    }

    window.onTileAttrChanged = function(event) {
        var renderContext = window.renderContext;
        
        if (event.target.id == "tileWidth") {
            renderContext.attributes.tile.size.w = parseInt(event.target.value);
        } else if (event.target.id == "tileHeight") {
            renderContext.attributes.tile.size.h = parseInt(event.target.value);
        }

        renderContext.invalidate();
        render();
    }
    
    window.onPlaneAttrChanged = function(event) {
        var renderContext = window.renderContext;

        if (event.target.id == "planeCount") {
            renderContext.attributes.packing.setPlaneCount(parseInt(event.target.value));
        } else if (event.target.id == "planePacking") {
            renderContext.attributes.packing.packing = parseInt(event.target.value);
        } else if (event.target.id == "planeEndian") {
            renderContext.attributes.packing.endian = parseInt(event.target.value);
        }
        
        renderContext.invalidate();
        render();
    }
    
	window.onResize = function() {
        var canvas = document.getElementById('canvas');
		
		var clientRect = canvas.getBoundingClientRect();
		canvas.width = clientRect.width;
		canvas.height = clientRect.height;

        window.renderContext.invalidate();
		render();
	}
	
    window.onLoad = function() {
        var dropZone = document.getElementById("canvas");
        dropZone.addEventListener("dragover", dragOver, false);
        dropZone.addEventListener("drop"    , drop    , false);
        
        var rippa = new Rippa();
        var attributes = rippa.createAttributesFromPreset("MSX2Screen");
        var renderContext = rippa.createRenderContext(attributes);

        window.rippa = rippa;
        window.renderContext = renderContext;

        var testData = new Uint8Array(
        [
        // 8x8 8-bit
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        // 8x8 8-bit
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        // 8x8 4-bit
        0xf0, 0xff, 0xff, 0x0f,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f, 
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f,
        // 8x8 4-bit
         0xf0, 0xff, 0xff, 0x0f,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f, 
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0x0f, 0x00, 0x00, 0xf0,
        0xf0, 0xff, 0xff, 0x0f,
        // 8x8 2-bit
        0x3f, 0xfc,
        0xc0, 0x03,
        0xc0, 0x03,
        0x0f, 0xfc, 
        0xc0, 0x03,
        0xc0, 0x03,
        0xc0, 0x03,
        0x3f, 0xfc,
        // 8x8 2-bit
        0x0f, 0xfc,
        0xc0, 0x03,
        0xc0, 0x03,
        0x0f, 0xfc, 
        0xc0, 0x03,
        0xc0, 0x03,
        0xc0, 0x03,
        0x3f, 0xfc,
        // 8x8 1-bit
        0x7e,
        0x81,
        0x81,
        0x7e, 
        0x81,
        0x81,
        0x81,
        0x7e,
        // 8x8 1-bit
        0x7e,
        0x81,
        0x81,
        0x7e, 
        0x81,
        0x81,
        0x81,
        0x7e]);

        window.renderContext.blob = new Blob([testData.buffer]);
        
        /*var rgbArray = [];//['rgb(255, 255, 255)'];
        var paletteIndex;
        var bpp = 4;
        for (paletteIndex = 0; paletteIndex < (2**bpp); ++paletteIndex) {
            var intensity = (((paletteIndex >> 3)+1)<<(11-bpp))-1;
            var r = intensity * ((paletteIndex & 0x02) >> 1);
            var g = intensity * ((paletteIndex & 0x04) >> 2);
            var b = intensity * (paletteIndex & 0x01);
            
            var rgb = `rgb(${r}, ${g}, ${b})`;
            
            rgbArray[paletteIndex] = rgb;
        }
        
        context.palette = new Palette(bpp, rgbArray);
        */
        
        updateUI();
        
        window.onResize();

        render();
    }
    
  </script>
 </head>
 <body onload="onLoad()" onresize="onResize()">
    <table style="height: 100%;">
        <tr>
            <input id="fileSelect" type="file" onchange="onOpenFile(event)"/>
        </tr>
        <tr style="height: 100%;">
            <canvas id="canvas" style="height: 100%;"></canvas>
        </tr>
        <tr>
            <span>
                <label for="zoom">Zoom</label>
                <input id="zoom" type="number" min="50" max="800" value="100" onchange="onViewChanged(event); return false;"/>
            </span>
        </tr>
        <tr>
            <span>
                <label for="offset">Offset</label>
                <input id="offset" type="number" min="0" value="0" onchange="onNavigationChanged(event); return false;"/>
            </span>
        </tr>
        <tr>
            <span>
                <label for="tileWidth">Tile width</label>
                <input id="tileWidth" type="number" min="1" max="1024" onchange="onTileAttrChanged(event); return false;"/>
                <label for="tileHeight">Tile height</label>
                <input id="tileHeight" type="number" min="1" max="1024" onchange="onTileAttrChanged(event); return false;"/>
            </span>
        </tr>
        <tr>
            <span>
                <label for="planeCount">Plane count</label>
                <select id="planeCount" type="number" onchange="onPlaneAttrChanged(event); return false;">
                    <option value="1">1-bit</option>
                    <option value="2">2-bit</option>
                    <option value="4">4-bit</option>
                    <option value="8">8-bit</option>
                </select>
                <label for="planePacking">Plane packing</label>
                <select id="planePacking" type="number" onchange="onPlaneAttrChanged(event); return false;"/>
                    <option value="0">Interleaved</option>
                    <option value="1">Byte</option>
                    <option value="2">Line</option>
                    <option value="3">Tile</option>
                </select>
                <label for="planeEndian">Plane endianess</label>
                <select id="planeEndian" type="number" onchange="onPlaneAttrChanged(event); return false;"/>
                    <option value="0">Little</option>
                    <option value="1">Big</option>
                </select>
            </span>
        </tr>
    </table>
 </body>
</html>